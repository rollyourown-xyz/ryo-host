#!/usr/sbin/nft -f
# SPDX-FileCopyrightText: 2022 Wilfred Nicoll <xyzroller@rollyourown.xyz>
# SPDX-License-Identifier: GPL-3.0-or-later

# Flush rules
flush ruleset

table inet filter {

    chain input {

        # By default, drop inbound traffic
        type filter hook input priority filter; policy drop;

        # Allow established and related connections
        ct state established,related accept

        # Drop invalid packets
        ct state invalid drop

        # Allow inbound traffic on loopback interface
        iifname "lo" accept

        # Allow inbound traffic on LXD network interface
        iifname "{{ host_id }}" accept

        # Allow IPv6 neighbour discovery
        icmpv6 type { nd-neighbor-solicit, nd-router-advert, nd-neighbor-advert } accept

        # Allow inbound ICMP echo-request with rate limit
        icmp type echo-request limit rate 5/second accept
        icmpv6 type echo-request limit rate 5/second accept

        # Allow IPv6 DHCPv6
        udp dport dhcpv6-client accept

        # Allow inbound SSH on custom TCP port
        tcp dport {{ host_new_ssh_port }} accept

        # Allow inbound traffic on Wireguard UDP port
        udp dport {{ host_wireguard_port }} accept

        # Allow inbound LXD remote traffic from wireguard network
        ip saddr {{ wireguard_address_network_part }}.0/24 ip daddr {{ wireguard_address_network_part }}.2/32 tcp dport 8443 accept


        ## Consul Ports
        ###############

        # Allow on UDP from LXD host network:
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul DNS server (Port 8600)
        ip saddr {{ lxd_host_network_part }}.0/24 udp dport { 8301, 8302, 8600 } accept
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 saddr {{ host_public_ipv6_prefix }}::{{lxd_host_network_ipv6_subnet}}:0/112 udp dport { 8301, 8302, 8600 } accept
        # END EXPERIMENTAL
        #

        # Allow on TCP from LXD host network:
        # - Consul Server RPC (Port 8300)
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul HTTP API (Port 8500)
        # - Consul DNS server (Port 8600)
        ip saddr {{ lxd_host_network_part }}.0/24 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 saddr {{ host_public_ipv6_prefix }}::{{lxd_host_network_ipv6_subnet}}:0/112 udp dport { 8301, 8302, 8600 } accept
        # END EXPERIMENTAL
        #

        # Allow on UDP from control-node consul server:
        # - Consul WAN Serf (Port 8302)
        ip saddr {{ veth0_network_part }}.1/32 udp dport 8302 accept
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 saddr {{ veth0_network_ipv6_prefix }}::1/128 udp dport 8302 accept
        # END EXPERIMENTAL
        #

        # Allow on TCP from control-node consul server:
        # - Consul Server RPC (Port 8300)
        # - Consul WAN Serf (Port 8302)
        # - Consul HTTP API (Port 8500)
        ip saddr {{ veth0_network_part }}.1/32 tcp dport { 8300, 8302, 8500 } accept
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 saddr {{ veth0_network_ipv6_prefix }}::1/128 tcp dport { 8300, 8302, 8500 } accept
        # END EXPERIMENTAL
        #

        # Allow on TCP from wireguard network:
        # - Consul HTTP API (Port 8500)
        ip saddr {{ wireguard_address_network_part }}.0/24 tcp dport 8500 accept
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 saddr {{ wireguard_address_network_ipv6_prefix }}::/64 tcp dport 8500 accept
        # END EXPERIMENTAL
        #
}

    chain forward {
        # By default, drop forwarded traffic
        type filter hook forward priority filter; policy drop;

        # Allow forwarding to and from LXD network interface
        iifname "{{ host_id }}" accept
        oifname "{{ host_id }}" accept
    }

    chain output {
        # By default, allow outbound traffic
        type filter hook output priority filter; policy accept;

        # Allow outbound traffic to loopback interface
        oifname "lo" accept
        oifname "lo" ip daddr != 127.0.0.0/8 drop
        oifname "lo" ip6 daddr != ::1/128 drop
    }
}


table inet nat {

    chain prerouting {
        type nat hook prerouting priority dstnat;
    }

    chain output {
        type nat hook output priority filter;

        # Map localhost DNS port 53 to Consul listening port
        ip daddr 127.0.0.1 udp dport 53 redirect to 8600
        ip daddr 127.0.0.1 tcp dport 53 redirect to 8600
        #
        # THE FOLLOWING IS EXPERIMENTAL
        ip6 daddr ::1/128 udp dport 53 redirect to 8600
        ip6 daddr ::1/128 tcp dport 53 redirect to 8600
        # END EXPERIMENTAL
        #
    }

    chain postrouting {
        type nat hook postrouting priority srcnat;

        # LXD network IPv4 NATting for traffic to internet
        # Note: this provides IPv4 NAT **to the internet** for LXD containers in LXD host network without
        # using ipv4.nat=true on the LXD network definition (which would also NAT **between** LXD networks)
        ip saddr {{ lxd_host_network_part }}.0/24 oifname "eth*" masquerade
        ip saddr {{ lxd_host_network_part }}.0/24 oifname "en*" masquerade
        #
        # THE FOLLOWING IS EXPERIMENTAL - SHOULD NOT BE NEEDED!!!
        # LXD network IPv6 NATting for traffic to internet
        # Note: this provides IPv6 NAT **to the internet** for LXD containers in LXD host network without
        # using ipv6.nat=true on the LXD network definition (which would also NAT **between** LXD networks)
        #ip6 saddr {{ host_public_ipv6_prefix }}::{{lxd_host_network_ipv6_subnet}}:0/112 oifname "eth*" masquerade
        #ip6 saddr {{ host_public_ipv6_prefix }}::{{lxd_host_network_ipv6_subnet}}:0/112 oifname "en*" masquerade
        # END EXPERIMENTAL
        #

    }
}
