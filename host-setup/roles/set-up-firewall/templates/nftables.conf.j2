#!/usr/sbin/nft -f
# SPDX-FileCopyrightText: 2022 Wilfred Nicoll <xyzroller@rollyourown.xyz>
# SPDX-License-Identifier: GPL-3.0-or-later

# Flush rules
flush ruleset

table inet filter {

    chain input {

        # By default, drop inbound traffic
        type filter hook input priority filter; policy drop;

        # Allow established and related connections
        ct state established,related accept

        # Drop invalid packets
        ct state invalid drop

        # Allow inbound traffic on loopback interface
        iifname "lo" accept

        # Allow inbound traffic on LXD network interface
        iifname "{{ host_id }}" accept

        # Allow inbound traffic on Packer build LXD network interface
        iifname "build" accept

        # Allow ICMPv4
        icmp type { echo-reply, destination-unreachable, echo-request, time-exceeded } accept

        # Allow ICMPv6
        icmpv6 type { destination-unreachable, packet-too-big, time-exceeded, parameter-problem, echo-request, echo-reply, nd-router-solicit, nd-router-advert, nd-neighbor-solicit, nd-neighbor-advert, ind-neighbor-solicit, ind-neighbor-advert} accept

        # Allow IPv6 DHCPv6 on LXD network interface
        iifname "{{ host_id }}" udp dport dhcpv6-client accept

        # Allow inbound traffic to the host server on Wireguard UDP port
        ip daddr {{ host_public_ip }}/32 udp dport {{ host_wireguard_port }} accept
        {% if host_public_ipv6 == true %}ip6 daddr {{ host_public_ipv6_address }}/128 udp dport {{ host_wireguard_port }} accept{% endif %}


        # Allow inbound SSH to the host server on custom TCP port from the wireguard network
        ip saddr {{ wireguard_network_part }}.0/24 tcp dport {{ host_new_ssh_port }} accept
        ip6 saddr {{ wireguard_network_ipv6_prefix }}::/64 tcp dport {{ host_new_ssh_port }} accept

        # Allow inbound LXD remote traffic from wireguard network
        ip saddr {{ wireguard_network_part }}.0/24 ip daddr {{ wireguard_network_part }}.2/32 tcp dport 8443 accept
        ip6 saddr {{ wireguard_network_ipv6_prefix }}::/64 ip6 daddr {{ wireguard_network_ipv6_prefix }}::2/128 tcp dport 8443 accept


        ## Consul Ports
        ###############

        # Allow Consul ports on UDP from LXD host network:
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul DNS server (Port 8600)
        ip saddr {{ lxd_host_network_part }}.0/24 udp dport { 8301, 8302, 8600 } accept
        {% if host_public_ipv6 == true %}ip6 saddr {{ host_public_ipv6_prefix }}::{{ lxd_host_network_ipv6_subnet }}:0/112 udp dport { 8301, 8302, 8600 } accept
        {% else %}ip6 saddr {{ lxd_host_private_ipv6_prefix }}::{{ lxd_host_network_ipv6_subnet }}:0/112 udp dport { 8301, 8302, 8600 } accept
        {% endif %}


        # Allow Consul ports on TCP from LXD host network:
        # - Consul Server RPC (Port 8300)
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul HTTP API (Port 8500)
        # - Consul DNS server (Port 8600)
        ip saddr {{ lxd_host_network_part }}.0/24 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        {% if host_public_ipv6 == true %}ip6 saddr {{ host_public_ipv6_prefix }}::{{ lxd_host_network_ipv6_subnet }}:0/112 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        {% else %}ip6 saddr {{ lxd_host_private_ipv6_prefix }}::{{ lxd_host_network_ipv6_subnet }}:0/112 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        {% endif%}


        # Allow Consul ports on UDP from control-node consul server:
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul DNS server (Port 8600)
        ip saddr {{ veth0_network_part }}.1/32 udp dport { 8301, 8302, 8600 } accept
        ip6 saddr {{ veth0_network_ipv6_prefix }}::1/128 udp dport { 8301, 8302, 8600 } accept

        # Allow Consul ports on TCP from control-node consul server:
        # - Consul Server RPC (Port 8300)
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul HTTP API (Port 8500)
        # - Consul DNS server (Port 8600)
        ip saddr {{ veth0_network_part }}.1/32 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        ip6 saddr {{ veth0_network_ipv6_prefix }}::1/128 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept

        # Allow Consul ports on UDP from wireguard network:
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul DNS server (Port 8600)
        ip saddr {{ wireguard_network_part }}.0/24 udp dport { 8301, 8302, 8600 } accept
        ip6 saddr {{ wireguard_network_ipv6_prefix }}::/64 udp dport { 8301, 8302, 8600 } accept

        # Allow Consul ports on TCP from wireguard network:
        # - Consul Server RPC (Port 8300)
        # - Consul LAN Serf (Port 8301)
        # - Consul WAN Serf (Port 8302)
        # - Consul HTTP API (Port 8500)
        # - Consul DNS server (Port 8600)
        ip saddr {{ wireguard_network_part }}.0/24 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept
        ip6 saddr {{ wireguard_network_ipv6_prefix }}::/64 tcp dport { 8300, 8301, 8302, 8500, 8600 } accept

}

    chain forward {
        # By default, drop forwarded traffic
        type filter hook forward priority filter; policy drop;

        # Allow forwarding to and from LXD network interface
        iifname "{{ host_id }}" accept
        oifname "{{ host_id }}" accept
    }

    chain output {
        # By default, allow outbound traffic
        type filter hook output priority filter; policy accept;

        # Allow loopback outbound traffic to loopback interface only
        oifname "lo" accept
        oifname "lo" ip daddr != 127.0.0.0/8 drop
        oifname "lo" ip6 daddr != ::1/128 drop
    }
}


table inet nat {

    chain prerouting {
        type nat hook prerouting priority dstnat;
    }

    chain output {
        type nat hook output priority filter;

        # Map localhost DNS port 53 to Consul listening port
        ip daddr 127.0.0.1 udp dport 53 redirect to 8600
        ip daddr 127.0.0.1 tcp dport 53 redirect to 8600
        ip6 daddr ::1/128 udp dport 53 redirect to 8600
        ip6 daddr ::1/128 tcp dport 53 redirect to 8600
    }

    chain postrouting {
        type nat hook postrouting priority srcnat;

        # LXD network IPv4 NATting for traffic to internet
        # Note: this provides IPv4 NAT **to the internet** for LXD containers in LXD host network without
        # using ipv4.nat=true on the LXD network definition (which would also NAT **between** LXD networks)
        oifname "{{ ansible_default_ipv4.interface }}" ip saddr {{ lxd_host_network_part }}.0/24 masquerade
    }
}
